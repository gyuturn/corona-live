{"version":3,"sources":["logo.svg","contents/Header.js","contents/Acc.js","contents/useDidMountEffect.js","contents/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","id","Acc","useState","Confirmed","Deaths","Recovered","acc","setAcc","length","useEffect","fetch","then","res","json","data","useDidMountEffect","func","deps","didMount","useRef","current","Graph","today","setToday","todayComfirmed","date","weekConfiremd","setWeekConfiremd","labels","datasets","label","backgroundColor","fill","graphToday","setGraphToday","confirmedData","setConfirmedData","console","log","makeData","items","arr","reduce","cur","currentDate","Date","year","getFullYear","month","getMonth","getDate","confirmed","active","Active","death","recovered","findItem","find","a","push","map","fetchEvent","week","i","weekdata","splitDate","split","weekDate","substring","setWeek","class","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.899bbe2f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header className=\"header\">\r\n            <h3>CORONA <span id=\"live\">LIVE</span></h3>\r\n            <ul id=\"country\">\r\n                <li className=\"nation\">국내</li>\r\n                <li className=\"nation\">미국</li>\r\n                <li className=\"nation\">중국</li>\r\n            </ul>\r\n            \r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst Acc = () => {\r\n    const [acc,setAcc]=useState([{\r\n        Confirmed: 1,\r\n        Deaths: 1,\r\n        Recovered: 1\r\n    }]);//초기값 설정\r\n\r\n\r\n    let Confirmed=acc[acc.length-1].Confirmed;\r\n    let Deaths=acc[acc.length-1].Deaths;;\r\n    let Recovered=acc[acc.length-1].Recovered;\r\n\r\n    useEffect(()=>{\r\n        const fetchEvent = () =>{\r\n            fetch(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n            .then(res=>res.json())\r\n            .then(data=>setAcc(data));\r\n        }\r\n        fetchEvent();\r\n       \r\n        \r\n        \r\n    },[])\r\n  \r\n    \r\n    return(\r\n        <table className=\"Acc\">\r\n            <thead>\r\n                <tr>\r\n                    <td>누적 확진자</td>\r\n                    <td>누적 사망자</td>\r\n                    <td>누적 격리해제</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr>\r\n                <td id=\"acConfirmed\">{Confirmed}</td> \r\n                <td id=\"acDeaths\">{Deaths}</td>\r\n                <td>{Recovered}</td>\r\n\r\n            </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Acc","import React, { useEffect, useRef } from 'react';\r\n\r\nconst useDidMountEffect = (func, deps) => {\r\n\tconst didMount = useRef(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (didMount.current) func();\r\n\t\telse didMount.current = true;\r\n\t}, deps);\r\n};\r\n\r\nexport default useDidMountEffect;\r\n","import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport useDidMountEffect from \"./useDidMountEffect\";\r\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\r\nimport Chart from 'chart.js/auto';\r\nimport axios from 'axios'\r\n\r\nconst Graph = () => {\r\n    const [today,setToday]=useState([{Confirmed: 1}]);\r\n    const [weekConfiremd,setWeekConfiremd]=useState([\r\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\r\n    const [graphToday,setGraphToday]=useState(\r\n      {\r\n        labels:[\"1월\",\"2월\",\"3월\"],\r\n        datasets: [\r\n            {\r\n                label:\"국내 누적 확진자\",\r\n                backgroundColor:\"salmon\",\r\n                fill:false,\r\n                data: [10,5,3]\r\n            }\r\n        ]\r\n      }\r\n    );\r\n\r\n    const [confirmedData, setConfirmedData] = useState({\r\n      labels:[\"1월\",\"2월\",\"3월\"],\r\n              datasets: [\r\n                  {\r\n                      label:\"국내 누적 확진자\",\r\n                      backgroundColor:\"salmon\",\r\n                      fill:true,\r\n                      data: [10,5,3]\r\n                  }\r\n              ]\r\n  });\r\n\r\n    console.log(today);\r\n  \r\n\r\n   \r\n    \r\n \r\n    \r\n       \r\n    useEffect(()=>{\r\n        const fetchEvent = () =>{\r\n            fetch(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n            .then(res=>res.json())\r\n            .then(data=>{\r\n              setToday(data)\r\n              console.log(data);\r\n              makeData(data);\r\n            });\r\n\r\n            \r\n            \r\n            const makeData = (items) =>{\r\n              const arr= items.reduce((acc, cur)=>{\r\n                  const currentDate= new Date(cur.Date);\r\n  \r\n                  const year = currentDate.getFullYear();\r\n                  const month = currentDate.getMonth();\r\n                  const date = currentDate.getDate();\r\n                  const confirmed=cur.Confirmed;\r\n                  const active=cur.Active;\r\n                  const death=cur.Deaths;\r\n                  const recovered=cur.Recovered;\r\n  \r\n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\r\n              \r\n                  if(!findItem){\r\n                      acc.push(\r\n                          {\r\n                              year:year, month: month,date:date, confirmed,active,death,recovered\r\n                          }\r\n                      )\r\n                  }\r\n                  if(findItem && findItem.date< date){\r\n                      findItem.active=active;\r\n                      findItem.death=death;\r\n                      findItem.date=date;\r\n                      findItem.year=year;\r\n                      findItem.month=month;\r\n                      findItem.recovered=recovered;\r\n                      findItem.confirmed=confirmed;\r\n                  }\r\n                  return acc;\r\n              },[]);\r\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\r\n            setConfirmedData({\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        label:\"국내 누적 확진자\",\r\n                        backgroundColor:\"skyblue\",\r\n                        fill:true,\r\n                        data: arr.map(a=>a.confirmed)\r\n                    }\r\n                ]\r\n            })\r\n            }\r\n\r\n\r\n              \r\n            \r\n        }\r\n        fetchEvent();   \r\n    }, [])\r\n\r\n    //첫 렌더링 막기\r\n    useDidMountEffect(()=>{\r\n        const setWeek = () =>{\r\n            var week=[];\r\n            for(let i=today.length-2;i>today.length-10;i--){\r\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\r\n            const date=today[i].Date;\r\n            week.push({todayComfirmed,date});\r\n            }\r\n            console.log(week);\r\n            setWeekConfiremd(week);\r\n\r\n            var date=[];\r\n            var weekdata=[];\r\n            \r\n            for(let i=7;i>=0;i--){\r\n              var confirmed=week[i].todayComfirmed;\r\n              var splitDate=week[i].date.split('-');\r\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\r\n              date.push(weekDate);\r\n              weekdata.push(confirmed);\r\n            }\r\n    \r\n            setGraphToday({\r\n              labels:date,\r\n              datasets: [\r\n                {\r\n                    label:\"국내 확진자\",\r\n                    backgroundColor:\"skyblue\",\r\n                    fill:false,\r\n                    data: weekdata\r\n                }\r\n              ]\r\n            })\r\n\r\n        }\r\n        setWeek();\r\n    },[today])\r\n\r\n    return(\r\n      <div>\r\n      <div id=\"todaystatic\">\r\n          <div id=\"todayConfirmed\">\r\n            <span>오늘 확진자수</span>\r\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\r\n          </div>\r\n          <div id=\"comparelist\">\r\n          <div class=\"compare\">\r\n            <span>vs 어제</span>\r\n            <span class=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed}↑</span>\r\n          </div>\r\n          <div class=\"compare\">\r\n            <span>vs 1주일전</span>\r\n            <span class=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\r\n          </div>\r\n          </div>\r\n      </div>\r\n        <div class=\"graph\">\r\n          <Line\r\n          data={graphToday}\r\n          />\r\n          </div>\r\n          <div class=\"graph\">\r\n          <Bar \r\n                data={confirmedData}\r\n          />\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Graph","import logo from './logo.svg';\nimport './App.css';\nimport Header from \"./contents/Header\"\nimport Acc from \"./contents/Acc\"\nimport Graph from \"./contents/Graph\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Acc />\n      <Graph />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}