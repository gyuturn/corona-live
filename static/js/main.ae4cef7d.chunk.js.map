{"version":3,"sources":["contents/Header.js","contents/useDidMountEffect.js","contents/Korea/Graph.js","contents/Korea/Acc.js","contents/Nav.js","contents/Spain/SpainGraph.js","contents/Spain/SpainAcc.js","contents/Japan/JapanGraph.js","contents/Japan/JapanAcc.js","contents/Germany/GermanyGraph.js","contents/Germany/GermanyAcc.js","contents/Brazil/BrazilGraph.js","contents/Brazil/BrazilAcc.js","contents/France/FranceGraph.js","contents/France/FranceAcc.js","contents/Portugal/PortugalGraph.js","contents/Portugal/PortugalAcc.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","id","useDidMountEffect","func","deps","didMount","useRef","useEffect","current","Graph","useState","Confirmed","today","setToday","todayComfirmed","date","weekConfiremd","setWeekConfiremd","labels","datasets","label","backgroundColor","fill","data","graphToday","setGraphToday","confirmedData","setConfirmedData","fetch","then","res","json","console","log","makeData","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","getDate","confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","a","push","map","fetchEvent","week","i","length","weekdata","splitDate","split","weekDate","substring","setWeek","item","compare","document","getElementById","innerText","style","background","color","selectArrow","Acc","setAcc","exceptPage","getElementsByClassName","thisPage","window","location","pathname","substr","Nav","to","App","path","element","JapanAcc","SpainAcc","GermanyAcc","BrazilAcc","FranceAcc","PortugalAcc","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ae4cef7d.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n    return(\n        <header className=\"header\">\n            <h3>CORONA <span id=\"live\">LIVE</span></h3>\n            \n            \n\n        </header>\n    )\n}\n\nexport default Header","import React, { useEffect, useRef } from 'react';\n\nconst useDidMountEffect = (func, deps) => {\n\tconst didMount = useRef(false);\n\n\tuseEffect(() => {\n\t\tif (didMount.current) func();\n\t\telse didMount.current = true;\n\t}, deps);\n};\n\nexport default useDidMountEffect;\n","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport useDidMountEffect from \"../useDidMountEffect\";\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\nimport Chart from 'chart.js/auto';\nimport axios from 'axios'\n\nconst Graph = () => {\n    const [today,setToday]=useState([{Confirmed: 1}]);\n    const [weekConfiremd,setWeekConfiremd]=useState([\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\n    const [graphToday,setGraphToday]=useState(\n      {\n        labels:[\"1월\",\"2월\",\"3월\"],\n        datasets: [\n            {\n                label:\"국내 누적 확진자\",\n                backgroundColor:\"salmon\",\n                fill:false,\n                data: [10,5,3]\n            }\n        ]\n      }\n    );\n\n    const [confirmedData, setConfirmedData] = useState({\n      labels:[\"1월\",\"2월\",\"3월\"],\n              datasets: [\n                  {\n                      label:\"국내 누적 확진자\",\n                      backgroundColor:\"salmon\",\n                      fill:true,\n                      data: [10,5,3]\n                  }\n              ]\n  });\n\n\n  \n\n   \n    \n \n    \n       \n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/kr\")\n            .then(res=>res.json())\n            .then(data=>{\n              setToday(data)\n              console.log(data);\n              makeData(data);\n            });\n          \n            \n            \n            const makeData = (items) =>{\n              const arr= items.reduce((acc, cur)=>{\n                  const currentDate= new Date(cur.Date);\n  \n                  const year = currentDate.getFullYear();\n                  const month = currentDate.getMonth();\n                  const date = currentDate.getDate();\n                  const confirmed=cur.Confirmed;\n                  const active=cur.Active;\n                  const death=cur.Deaths;\n                  const recovered=cur.Recovered;\n  \n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\n              \n                  if(!findItem){\n                      acc.push(\n                          {\n                              year:year, month: month,date:date, confirmed,active,death,recovered\n                          }\n                      )\n                  }\n                  if(findItem && findItem.date< date){\n                      findItem.active=active;\n                      findItem.death=death;\n                      findItem.date=date;\n                      findItem.year=year;\n                      findItem.month=month;\n                      findItem.recovered=recovered;\n                      findItem.confirmed=confirmed;\n                  }\n                  return acc;\n              },[]);\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label:\"국내 누적 확진자\",\n                        backgroundColor:\"skyblue\",\n                        fill:true,\n                        data: arr.map(a=>a.confirmed)\n                    }\n                ]\n            })\n            }\n\n\n              \n            \n        }\n        fetchEvent();   \n    }, [])\n\n    //첫 렌더링 막기\n    useDidMountEffect(()=>{\n        const setWeek = () =>{\n            var week=[];\n            for(let i=today.length-2;i>today.length-10;i--){\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\n            const date=today[i].Date;\n            week.push({todayComfirmed,date});\n            }\n         \n            setWeekConfiremd(week);\n\n            var date=[];\n            var weekdata=[];\n            \n            for(let i=7;i>=0;i--){\n              var confirmed=week[i].todayComfirmed;\n              var splitDate=week[i].date.split('-');\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\n              date.push(weekDate);\n              weekdata.push(confirmed);\n            }\n    \n            setGraphToday({\n              labels:date,\n              datasets: [\n                {\n                    label:\"국내 확진자\",\n                    backgroundColor:\"skyblue\",\n                    fill:false,\n                    data: weekdata\n                }\n              ]\n            })\n\n        }\n        setWeek();\n    },[today])\n\n   const selectArrow=(item) =>{\n      const compare=document.getElementById(\"compareYesterday\");\n      if(compare==null)\n      return;\n     if(item>=0){\n       compare.innerText=item+\"↑\";\n     }\n     else{\n       compare.innerText=item+\"↓\";\n       compare.style.background=\"#eff2ff\";\n       compare.style.color=\"#5673EB\"\n     }\n   }\n   \n\n    return(\n      <div>\n      <div id=\"todaystatic\">\n          <div id=\"todayConfirmed\">\n            <span>오늘 확진자수</span>\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\n          </div>\n          <div id=\"comparelist\">\n          <div className=\"compare\">\n            <span>vs 어제</span>\n            <span id=\"compareYesterday\" className=\"comparenumber\">{selectArrow(\n              weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed)\n            }</span>\n          </div>\n          <div className=\"compare\">\n            <span>vs 1주일전</span>\n            <span className=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\n          </div>\n          </div>\n      </div>\n        <div className=\"graph\">\n          <Line\n          data={graphToday}\n          />\n          </div>\n          <div className=\"graph\">\n          <Bar \n                data={confirmedData}\n          />\n          </div>\n      </div>\n    )\n}\n\nexport default Graph","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport Graph from './Graph';\n\nconst Acc = () => {\n    const [acc,setAcc]=useState([{\n        Confirmed: 1,\n        Deaths: 1,\n        Recovered: 1\n    }]);//초기값 설정\n\n\n    let Confirmed=acc[acc.length-1].Confirmed;\n    let Deaths=acc[acc.length-1].Deaths;;\n    let Recovered=acc[acc.length-1].Recovered;\n\n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/kr\")\n            .then(res=>res.json())\n            .then(data=>setAcc(data));\n            const exceptPage=document.getElementsByClassName(\"nation\");\n            for(let i=0;i<exceptPage.length;i++){\n                exceptPage[i].style.background=\"white\";\n            }\n            const thisPage=document.getElementById(window.location.pathname.substr(1));\n            if(thisPage==null){\n                \n            }\n            else{\n                thisPage.style.background=\"#DCDCDC\";\n            }\n        }\n        fetchEvent();\n       \n        \n        \n    },[])\n  \n    \n    return(\n        <div>\n        <table className=\"Acc\">\n            <thead>\n                <tr>\n                    <td>누적 확진자</td>\n                    <td>누적 사망자</td>\n                    <td>누적 격리해제</td>\n                </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td id=\"acConfirmed\">{Confirmed}</td> \n                <td id=\"acDeaths\">{Deaths}</td>\n                <td>{Recovered}</td>\n\n            </tr>\n            </tbody>\n        </table>\n        <Graph/>\n        </div>\n    )\n}\n\nexport default Acc\n","import React from 'react'\nimport { Link,useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from 'react'\n\n\n\nconst Nav = () => {\n    \n\n    return(\n        <nav className=\"nav\">\n            <ul id=\"country\">\n                <Link to=\"/korea\" className=\"nation\" id=\"korea\"><li >국내</li></Link>\n                <Link to=\"/japan\" className=\"nation\" id=\"japan\"><li >일본</li></Link>\n                <Link to=\"/spain\" className=\"nation\" id=\"spain\"><li>스페인</li></Link>\n                <Link to=\"/germany\" className=\"nation\" id=\"germany\"><li >독일</li></Link>\n                <Link to=\"/brazil\" className=\"nation\" id=\"brazil\"><li >브라질</li></Link>\n                <Link to=\"/france\" className=\"nation\"id=\"france\"><li >프랑스</li></Link>\n                <Link to=\"/portugal\" className=\"nation\" id=\"portugal\"><li >포르투갈</li></Link>\n            </ul>\n            \n\n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport useDidMountEffect from \"../useDidMountEffect\";\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\nimport Chart from 'chart.js/auto';\nimport axios from 'axios'\n\nconst Graph = () => {\n    const [today,setToday]=useState([{Confirmed: 1}]);\n    const [weekConfiremd,setWeekConfiremd]=useState([\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\n    const [graphToday,setGraphToday]=useState(\n      {\n        labels:[\"1월\",\"2월\",\"3월\"],\n        datasets: [\n            {\n                label:\"국내 누적 확진자\",\n                backgroundColor:\"salmon\",\n                fill:false,\n                data: [10,5,3]\n            }\n        ]\n      }\n    );\n\n    const [confirmedData, setConfirmedData] = useState({\n      labels:[\"1월\",\"2월\",\"3월\"],\n              datasets: [\n                  {\n                      label:\"국내 누적 확진자\",\n                      backgroundColor:\"salmon\",\n                      fill:true,\n                      data: [10,5,3]\n                  }\n              ]\n  });\n\n\n  \n\n   \n    \n \n    \n       \n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/ES\")\n            .then(res=>res.json())\n            .then(data=>{\n              setToday(data)\n              console.log(data);\n              makeData(data);\n            });\n          \n            \n            \n            const makeData = (items) =>{\n              const arr= items.reduce((acc, cur)=>{\n                  const currentDate= new Date(cur.Date);\n  \n                  const year = currentDate.getFullYear();\n                  const month = currentDate.getMonth();\n                  const date = currentDate.getDate();\n                  const confirmed=cur.Confirmed;\n                  const active=cur.Active;\n                  const death=cur.Deaths;\n                  const recovered=cur.Recovered;\n  \n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\n              \n                  if(!findItem){\n                      acc.push(\n                          {\n                              year:year, month: month,date:date, confirmed,active,death,recovered\n                          }\n                      )\n                  }\n                  if(findItem && findItem.date< date){\n                      findItem.active=active;\n                      findItem.death=death;\n                      findItem.date=date;\n                      findItem.year=year;\n                      findItem.month=month;\n                      findItem.recovered=recovered;\n                      findItem.confirmed=confirmed;\n                  }\n                  return acc;\n              },[]);\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label:\"국내 누적 확진자\",\n                        backgroundColor:\"skyblue\",\n                        fill:true,\n                        data: arr.map(a=>a.confirmed)\n                    }\n                ]\n            })\n            }\n\n\n              \n            \n        }\n        fetchEvent();   \n    }, [])\n\n    //첫 렌더링 막기\n    useDidMountEffect(()=>{\n        const setWeek = () =>{\n            var week=[];\n            for(let i=today.length-2;i>today.length-10;i--){\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\n            const date=today[i].Date;\n            week.push({todayComfirmed,date});\n            }\n         \n            setWeekConfiremd(week);\n\n            var date=[];\n            var weekdata=[];\n            \n            for(let i=7;i>=0;i--){\n              var confirmed=week[i].todayComfirmed;\n              var splitDate=week[i].date.split('-');\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\n              date.push(weekDate);\n              weekdata.push(confirmed);\n            }\n    \n            setGraphToday({\n              labels:date,\n              datasets: [\n                {\n                    label:\"국내 확진자\",\n                    backgroundColor:\"skyblue\",\n                    fill:false,\n                    data: weekdata\n                }\n              ]\n            })\n\n        }\n        setWeek();\n    },[today])\n\n   const selectArrow=(item) =>{\n      const compare=document.getElementById(\"compareYesterday\");\n      if(compare==null)\n      return;\n     if(item>=0){\n       compare.innerText=item+\"↑\";\n     }\n     else{\n       compare.innerText=item+\"↓\";\n       compare.style.background=\"#eff2ff\";\n       compare.style.color=\"#5673EB\"\n     }\n   }\n   \n\n    return(\n      <div>\n      <div id=\"todaystatic\">\n          <div id=\"todayConfirmed\">\n            <span>오늘 확진자수</span>\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\n          </div>\n          <div id=\"comparelist\">\n          <div className=\"compare\">\n            <span>vs 어제</span>\n            <span id=\"compareYesterday\" className=\"comparenumber\">{selectArrow(\n              weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed)\n            }</span>\n          </div>\n          <div className=\"compare\">\n            <span>vs 1주일전</span>\n            <span className=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\n          </div>\n          </div>\n      </div>\n        <div className=\"graph\">\n          <Line\n          data={graphToday}\n          />\n          </div>\n          <div className=\"graph\">\n          <Bar \n                data={confirmedData}\n          />\n          </div>\n      </div>\n    )\n}\n\nexport default Graph","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport Graph from './SpainGraph';\n\nconst Acc = () => {\n    const [acc,setAcc]=useState([{\n        Confirmed: 1,\n        Deaths: 1,\n        Recovered: 1\n    }]);//초기값 설정\n\n\n    let Confirmed=acc[acc.length-1].Confirmed;\n    let Deaths=acc[acc.length-1].Deaths;;\n    let Recovered=acc[acc.length-1].Recovered;\n\n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/ES\")\n            .then(res=>res.json())\n            .then(data=>setAcc(data));\n            const exceptPage=document.getElementsByClassName(\"nation\");\n            for(let i=0;i<exceptPage.length;i++){\n                exceptPage[i].style.background=\"white\";\n            }\n            const thisPage=document.getElementById(window.location.pathname.substr(1));\n            thisPage.style.background=\"#DCDCDC\";\n        }\n        fetchEvent();\n       \n        console.log(acc);\n        \n    },[])\n  \n    \n    return(\n        <div>\n        <table className=\"Acc\">\n            <thead>\n                <tr>\n                    <td>누적 확진자</td>\n                    <td>누적 사망자</td>\n                    <td>누적 격리해제</td>\n                </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td id=\"acConfirmed\">{Confirmed}</td> \n                <td id=\"acDeaths\">{Deaths}</td>\n                <td>{Recovered}</td>\n\n            </tr>\n            </tbody>\n        </table>\n        <Graph/>\n        </div>\n    )\n}\n\nexport default Acc\n","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport useDidMountEffect from \"../useDidMountEffect\";\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\nimport Chart from 'chart.js/auto';\nimport axios from 'axios'\n\nconst Graph = () => {\n    const [today,setToday]=useState([{Confirmed: 1}]);\n    const [weekConfiremd,setWeekConfiremd]=useState([\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\n    const [graphToday,setGraphToday]=useState(\n      {\n        labels:[\"1월\",\"2월\",\"3월\"],\n        datasets: [\n            {\n                label:\"국내 누적 확진자\",\n                backgroundColor:\"salmon\",\n                fill:false,\n                data: [10,5,3]\n            }\n        ]\n      }\n    );\n\n    const [confirmedData, setConfirmedData] = useState({\n      labels:[\"1월\",\"2월\",\"3월\"],\n              datasets: [\n                  {\n                      label:\"국내 누적 확진자\",\n                      backgroundColor:\"salmon\",\n                      fill:true,\n                      data: [10,5,3]\n                  }\n              ]\n  });\n\n\n  \n\n   \n    \n \n    \n       \n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/JP\")\n            .then(res=>res.json())\n            .then(data=>{\n              setToday(data)\n              console.log(data);\n              makeData(data);\n            });\n          \n            \n            \n            const makeData = (items) =>{\n              const arr= items.reduce((acc, cur)=>{\n                  const currentDate= new Date(cur.Date);\n  \n                  const year = currentDate.getFullYear();\n                  const month = currentDate.getMonth();\n                  const date = currentDate.getDate();\n                  const confirmed=cur.Confirmed;\n                  const active=cur.Active;\n                  const death=cur.Deaths;\n                  const recovered=cur.Recovered;\n  \n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\n              \n                  if(!findItem){\n                      acc.push(\n                          {\n                              year:year, month: month,date:date, confirmed,active,death,recovered\n                          }\n                      )\n                  }\n                  if(findItem && findItem.date< date){\n                      findItem.active=active;\n                      findItem.death=death;\n                      findItem.date=date;\n                      findItem.year=year;\n                      findItem.month=month;\n                      findItem.recovered=recovered;\n                      findItem.confirmed=confirmed;\n                  }\n                  return acc;\n              },[]);\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label:\"국내 누적 확진자\",\n                        backgroundColor:\"skyblue\",\n                        fill:true,\n                        data: arr.map(a=>a.confirmed)\n                    }\n                ]\n            })\n            }\n\n\n              \n            \n        }\n        fetchEvent();   \n    }, [])\n\n    //첫 렌더링 막기\n    useDidMountEffect(()=>{\n        const setWeek = () =>{\n            var week=[];\n            for(let i=today.length-2;i>today.length-10;i--){\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\n            const date=today[i].Date;\n            week.push({todayComfirmed,date});\n            }\n         \n            setWeekConfiremd(week);\n\n            var date=[];\n            var weekdata=[];\n            \n            for(let i=7;i>=0;i--){\n              var confirmed=week[i].todayComfirmed;\n              var splitDate=week[i].date.split('-');\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\n              date.push(weekDate);\n              weekdata.push(confirmed);\n            }\n    \n            setGraphToday({\n              labels:date,\n              datasets: [\n                {\n                    label:\"국내 확진자\",\n                    backgroundColor:\"skyblue\",\n                    fill:false,\n                    data: weekdata\n                }\n              ]\n            })\n\n        }\n        setWeek();\n    },[today])\n\n   const selectArrow=(item) =>{\n      const compare=document.getElementById(\"compareYesterday\");\n      if(compare==null)\n      return;\n     if(item>=0){\n       compare.innerText=item+\"↑\";\n     }\n     else{\n       compare.innerText=item+\"↓\";\n       compare.style.background=\"#eff2ff\";\n       compare.style.color=\"#5673EB\"\n     }\n   }\n   \n\n    return(\n      <div>\n      <div id=\"todaystatic\">\n          <div id=\"todayConfirmed\">\n            <span>오늘 확진자수</span>\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\n          </div>\n          <div id=\"comparelist\">\n          <div className=\"compare\">\n            <span>vs 어제</span>\n            <span id=\"compareYesterday\" className=\"comparenumber\">{selectArrow(\n              weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed)\n            }</span>\n          </div>\n          <div className=\"compare\">\n            <span>vs 1주일전</span>\n            <span className=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\n          </div>\n          </div>\n      </div>\n        <div className=\"graph\">\n          <Line\n          data={graphToday}\n          />\n          </div>\n          <div className=\"graph\">\n          <Bar \n                data={confirmedData}\n          />\n          </div>\n      </div>\n    )\n}\n\nexport default Graph","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport Graph from './JapanGraph';\n\nconst Acc = () => {\n    const [acc,setAcc]=useState([{\n        Confirmed: 1,\n        Deaths: 1,\n        Recovered: 1\n    }]);//초기값 설정\n\n\n    let Confirmed=acc[acc.length-1].Confirmed;\n    let Deaths=acc[acc.length-1].Deaths;;\n    let Recovered=acc[acc.length-1].Recovered;\n\n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/JP\")\n            .then(res=>res.json())\n            .then(data=>setAcc(data));\n            const exceptPage=document.getElementsByClassName(\"nation\");\n            for(let i=0;i<exceptPage.length;i++){\n                exceptPage[i].style.background=\"white\";\n            }\n            const thisPage=document.getElementById(window.location.pathname.substr(1));\n            thisPage.style.background=\"#DCDCDC\";\n            \n        }\n        fetchEvent();\n       \n        \n        \n    },[])\n  \n    \n    return(\n        <div>\n        <table className=\"Acc\">\n            <thead>\n                <tr>\n                    <td>누적 확진자</td>\n                    <td>누적 사망자</td>\n                    <td>누적 격리해제</td>\n                </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td id=\"acConfirmed\">{Confirmed}</td> \n                <td id=\"acDeaths\">{Deaths}</td>\n                <td>{Recovered}</td>\n\n            </tr>\n            </tbody>\n        </table>\n        <Graph/>\n        </div>\n    )\n}\n\nexport default Acc","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport useDidMountEffect from \"../useDidMountEffect\";\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\nimport Chart from 'chart.js/auto';\nimport axios from 'axios'\n\nconst Graph = () => {\n    const [today,setToday]=useState([{Confirmed: 1}]);\n    const [weekConfiremd,setWeekConfiremd]=useState([\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\n    const [graphToday,setGraphToday]=useState(\n      {\n        labels:[\"1월\",\"2월\",\"3월\"],\n        datasets: [\n            {\n                label:\"국내 누적 확진자\",\n                backgroundColor:\"salmon\",\n                fill:false,\n                data: [10,5,3]\n            }\n        ]\n      }\n    );\n\n    const [confirmedData, setConfirmedData] = useState({\n      labels:[\"1월\",\"2월\",\"3월\"],\n              datasets: [\n                  {\n                      label:\"국내 누적 확진자\",\n                      backgroundColor:\"salmon\",\n                      fill:true,\n                      data: [10,5,3]\n                  }\n              ]\n  });\n\n\n  \n\n   \n    \n \n    \n       \n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/DE\")\n            .then(res=>res.json())\n            .then(data=>{\n              setToday(data)\n              console.log(data);\n              makeData(data);\n            });\n          \n            \n            \n            const makeData = (items) =>{\n              const arr= items.reduce((acc, cur)=>{\n                  const currentDate= new Date(cur.Date);\n  \n                  const year = currentDate.getFullYear();\n                  const month = currentDate.getMonth();\n                  const date = currentDate.getDate();\n                  const confirmed=cur.Confirmed;\n                  const active=cur.Active;\n                  const death=cur.Deaths;\n                  const recovered=cur.Recovered;\n  \n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\n              \n                  if(!findItem){\n                      acc.push(\n                          {\n                              year:year, month: month,date:date, confirmed,active,death,recovered\n                          }\n                      )\n                  }\n                  if(findItem && findItem.date< date){\n                      findItem.active=active;\n                      findItem.death=death;\n                      findItem.date=date;\n                      findItem.year=year;\n                      findItem.month=month;\n                      findItem.recovered=recovered;\n                      findItem.confirmed=confirmed;\n                  }\n                  return acc;\n              },[]);\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label:\"국내 누적 확진자\",\n                        backgroundColor:\"skyblue\",\n                        fill:true,\n                        data: arr.map(a=>a.confirmed)\n                    }\n                ]\n            })\n            }\n\n\n              \n            \n        }\n        fetchEvent();   \n    }, [])\n\n    //첫 렌더링 막기\n    useDidMountEffect(()=>{\n        const setWeek = () =>{\n            var week=[];\n            for(let i=today.length-2;i>today.length-10;i--){\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\n            const date=today[i].Date;\n            week.push({todayComfirmed,date});\n            }\n         \n            setWeekConfiremd(week);\n\n            var date=[];\n            var weekdata=[];\n            \n            for(let i=7;i>=0;i--){\n              var confirmed=week[i].todayComfirmed;\n              var splitDate=week[i].date.split('-');\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\n              date.push(weekDate);\n              weekdata.push(confirmed);\n            }\n    \n            setGraphToday({\n              labels:date,\n              datasets: [\n                {\n                    label:\"국내 확진자\",\n                    backgroundColor:\"skyblue\",\n                    fill:false,\n                    data: weekdata\n                }\n              ]\n            })\n\n        }\n        setWeek();\n    },[today])\n\n   const selectArrow=(item) =>{\n      const compare=document.getElementById(\"compareYesterday\");\n      if(compare==null)\n      return;\n     if(item>=0){\n       compare.innerText=item+\"↑\";\n     }\n     else{\n       compare.innerText=item+\"↓\";\n       compare.style.background=\"#eff2ff\";\n       compare.style.color=\"#5673EB\"\n     }\n   }\n   \n\n    return(\n      <div>\n      <div id=\"todaystatic\">\n          <div id=\"todayConfirmed\">\n            <span>오늘 확진자수</span>\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\n          </div>\n          <div id=\"comparelist\">\n          <div className=\"compare\">\n            <span>vs 어제</span>\n            <span id=\"compareYesterday\" className=\"comparenumber\">{selectArrow(\n              weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed)\n            }</span>\n          </div>\n          <div className=\"compare\">\n            <span>vs 1주일전</span>\n            <span className=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\n          </div>\n          </div>\n      </div>\n        <div className=\"graph\">\n          <Line\n          data={graphToday}\n          />\n          </div>\n          <div className=\"graph\">\n          <Bar \n                data={confirmedData}\n          />\n          </div>\n      </div>\n    )\n}\n\nexport default Graph","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport Graph from './GermanyGraph';\n\nconst Acc = () => {\n    const [acc,setAcc]=useState([{\n        Confirmed: 1,\n        Deaths: 1,\n        Recovered: 1\n    }]);//초기값 설정\n\n\n    let Confirmed=acc[acc.length-1].Confirmed;\n    let Deaths=acc[acc.length-1].Deaths;;\n    let Recovered=acc[acc.length-1].Recovered;\n\n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/DE\")\n            .then(res=>res.json())\n            .then(data=>setAcc(data));\n            const exceptPage=document.getElementsByClassName(\"nation\");\n            for(let i=0;i<exceptPage.length;i++){\n                exceptPage[i].style.background=\"white\";\n            }\n            const thisPage=document.getElementById(window.location.pathname.substr(1));\n            thisPage.style.background=\"#DCDCDC\";\n        }\n        fetchEvent();\n       \n        \n        \n    },[])\n  \n    \n    return(\n        <div>\n        <table className=\"Acc\">\n            <thead>\n                <tr>\n                    <td>누적 확진자</td>\n                    <td>누적 사망자</td>\n                    <td>누적 격리해제</td>\n                </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td id=\"acConfirmed\">{Confirmed}</td> \n                <td id=\"acDeaths\">{Deaths}</td>\n                <td>{Recovered}</td>\n\n            </tr>\n            </tbody>\n        </table>\n        <Graph/>\n        </div>\n    )\n}\n\nexport default Acc","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport useDidMountEffect from \"../useDidMountEffect\";\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\nimport Chart from 'chart.js/auto';\nimport axios from 'axios'\n\nconst Graph = () => {\n    const [today,setToday]=useState([{Confirmed: 1}]);\n    const [weekConfiremd,setWeekConfiremd]=useState([\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\n    const [graphToday,setGraphToday]=useState(\n      {\n        labels:[\"1월\",\"2월\",\"3월\"],\n        datasets: [\n            {\n                label:\"국내 누적 확진자\",\n                backgroundColor:\"salmon\",\n                fill:false,\n                data: [10,5,3]\n            }\n        ]\n      }\n    );\n\n    const [confirmedData, setConfirmedData] = useState({\n      labels:[\"1월\",\"2월\",\"3월\"],\n              datasets: [\n                  {\n                      label:\"국내 누적 확진자\",\n                      backgroundColor:\"salmon\",\n                      fill:true,\n                      data: [10,5,3]\n                  }\n              ]\n  });\n\n\n  \n\n   \n    \n \n    \n       \n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/BR\")\n            .then(res=>res.json())\n            .then(data=>{\n              setToday(data)\n              console.log(data);\n              makeData(data);\n            });\n          \n            \n            \n            const makeData = (items) =>{\n              const arr= items.reduce((acc, cur)=>{\n                  const currentDate= new Date(cur.Date);\n  \n                  const year = currentDate.getFullYear();\n                  const month = currentDate.getMonth();\n                  const date = currentDate.getDate();\n                  const confirmed=cur.Confirmed;\n                  const active=cur.Active;\n                  const death=cur.Deaths;\n                  const recovered=cur.Recovered;\n  \n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\n              \n                  if(!findItem){\n                      acc.push(\n                          {\n                              year:year, month: month,date:date, confirmed,active,death,recovered\n                          }\n                      )\n                  }\n                  if(findItem && findItem.date< date){\n                      findItem.active=active;\n                      findItem.death=death;\n                      findItem.date=date;\n                      findItem.year=year;\n                      findItem.month=month;\n                      findItem.recovered=recovered;\n                      findItem.confirmed=confirmed;\n                  }\n                  return acc;\n              },[]);\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label:\"국내 누적 확진자\",\n                        backgroundColor:\"skyblue\",\n                        fill:true,\n                        data: arr.map(a=>a.confirmed)\n                    }\n                ]\n            })\n            }\n\n\n              \n            \n        }\n        fetchEvent();   \n    }, [])\n\n    //첫 렌더링 막기\n    useDidMountEffect(()=>{\n        const setWeek = () =>{\n            var week=[];\n            for(let i=today.length-2;i>today.length-10;i--){\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\n            const date=today[i].Date;\n            week.push({todayComfirmed,date});\n            }\n         \n            setWeekConfiremd(week);\n\n            var date=[];\n            var weekdata=[];\n            \n            for(let i=7;i>=0;i--){\n              var confirmed=week[i].todayComfirmed;\n              var splitDate=week[i].date.split('-');\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\n              date.push(weekDate);\n              weekdata.push(confirmed);\n            }\n    \n            setGraphToday({\n              labels:date,\n              datasets: [\n                {\n                    label:\"국내 확진자\",\n                    backgroundColor:\"skyblue\",\n                    fill:false,\n                    data: weekdata\n                }\n              ]\n            })\n\n        }\n        setWeek();\n    },[today])\n\n   const selectArrow=(item) =>{\n      const compare=document.getElementById(\"compareYesterday\");\n      if(compare==null)\n      return;\n     if(item>=0){\n       compare.innerText=item+\"↑\";\n     }\n     else{\n       compare.innerText=item+\"↓\";\n       compare.style.background=\"#eff2ff\";\n       compare.style.color=\"#5673EB\"\n     }\n   }\n   \n\n    return(\n      <div>\n      <div id=\"todaystatic\">\n          <div id=\"todayConfirmed\">\n            <span>오늘 확진자수</span>\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\n          </div>\n          <div id=\"comparelist\">\n          <div className=\"compare\">\n            <span>vs 어제</span>\n            <span id=\"compareYesterday\" className=\"comparenumber\">{selectArrow(\n              weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed)\n            }</span>\n          </div>\n          <div className=\"compare\">\n            <span>vs 1주일전</span>\n            <span className=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\n          </div>\n          </div>\n      </div>\n        <div className=\"graph\">\n          <Line\n          data={graphToday}\n          />\n          </div>\n          <div className=\"graph\">\n          <Bar \n                data={confirmedData}\n          />\n          </div>\n      </div>\n    )\n}\n\nexport default Graph","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport Graph from './BrazilGraph';\n\nconst Acc = () => {\n    const [acc,setAcc]=useState([{\n        Confirmed: 1,\n        Deaths: 1,\n        Recovered: 1\n    }]);//초기값 설정\n\n\n    let Confirmed=acc[acc.length-1].Confirmed;\n    let Deaths=acc[acc.length-1].Deaths;;\n    let Recovered=acc[acc.length-1].Recovered;\n\n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/BR\")\n            .then(res=>res.json())\n            .then(data=>setAcc(data));\n\n            const exceptPage=document.getElementsByClassName(\"nation\");\n            for(let i=0;i<exceptPage.length;i++){\n                exceptPage[i].style.background=\"white\";\n            }\n            const thisPage=document.getElementById(window.location.pathname.substr(1));\n            thisPage.style.background=\"#DCDCDC\";\n        }\n        \n        fetchEvent();\n      \n       \n        \n        \n    },[])\n  \n    \n    return(\n        <div>\n        <table className=\"Acc\">\n            <thead>\n                <tr>\n                    <td>누적 확진자</td>\n                    <td>누적 사망자</td>\n                    <td>누적 격리해제</td>\n                </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td id=\"acConfirmed\">{Confirmed}</td> \n                <td id=\"acDeaths\">{Deaths}</td>\n                <td>{Recovered}</td>\n\n            </tr>\n            </tbody>\n        </table>\n        <Graph/>\n        </div>\n    )\n}\n\nexport default Acc","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport useDidMountEffect from \"../useDidMountEffect\";\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\nimport Chart from 'chart.js/auto';\nimport axios from 'axios'\n\nconst Graph = () => {\n    const [today,setToday]=useState([{Confirmed: 1}]);\n    const [weekConfiremd,setWeekConfiremd]=useState([\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\n    const [graphToday,setGraphToday]=useState(\n      {\n        labels:[\"1월\",\"2월\",\"3월\"],\n        datasets: [\n            {\n                label:\"국내 누적 확진자\",\n                backgroundColor:\"salmon\",\n                fill:false,\n                data: [10,5,3]\n            }\n        ]\n      }\n    );\n\n    const [confirmedData, setConfirmedData] = useState({\n      labels:[\"1월\",\"2월\",\"3월\"],\n              datasets: [\n                  {\n                      label:\"국내 누적 확진자\",\n                      backgroundColor:\"salmon\",\n                      fill:true,\n                      data: [10,5,3]\n                  }\n              ]\n  });\n\n\n  \n\n   \n    \n \n    \n       \n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/FR\")\n            .then(res=>res.json())\n            .then(data=>{\n              setToday(data)\n              console.log(data);\n              makeData(data);\n            });\n          \n            \n            \n            const makeData = (items) =>{\n              const arr= items.reduce((acc, cur)=>{\n                  const currentDate= new Date(cur.Date);\n  \n                  const year = currentDate.getFullYear();\n                  const month = currentDate.getMonth();\n                  const date = currentDate.getDate();\n                  const confirmed=cur.Confirmed;\n                  const active=cur.Active;\n                  const death=cur.Deaths;\n                  const recovered=cur.Recovered;\n  \n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\n              \n                  if(!findItem){\n                      acc.push(\n                          {\n                              year:year, month: month,date:date, confirmed,active,death,recovered\n                          }\n                      )\n                  }\n                  if(findItem && findItem.date< date){\n                      findItem.active=active;\n                      findItem.death=death;\n                      findItem.date=date;\n                      findItem.year=year;\n                      findItem.month=month;\n                      findItem.recovered=recovered;\n                      findItem.confirmed=confirmed;\n                  }\n                  return acc;\n              },[]);\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label:\"국내 누적 확진자\",\n                        backgroundColor:\"skyblue\",\n                        fill:true,\n                        data: arr.map(a=>a.confirmed)\n                    }\n                ]\n            })\n            }\n\n\n              \n            \n        }\n        fetchEvent();   \n    }, [])\n\n    //첫 렌더링 막기\n    useDidMountEffect(()=>{\n        const setWeek = () =>{\n            var week=[];\n            for(let i=today.length-2;i>today.length-10;i--){\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\n            const date=today[i].Date;\n            week.push({todayComfirmed,date});\n            }\n         \n            setWeekConfiremd(week);\n\n            var date=[];\n            var weekdata=[];\n            \n            for(let i=7;i>=0;i--){\n              var confirmed=week[i].todayComfirmed;\n              var splitDate=week[i].date.split('-');\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\n              date.push(weekDate);\n              weekdata.push(confirmed);\n            }\n    \n            setGraphToday({\n              labels:date,\n              datasets: [\n                {\n                    label:\"국내 확진자\",\n                    backgroundColor:\"skyblue\",\n                    fill:false,\n                    data: weekdata\n                }\n              ]\n            })\n\n        }\n        setWeek();\n    },[today])\n\n   const selectArrow=(item) =>{\n      const compare=document.getElementById(\"compareYesterday\");\n      if(compare==null)\n      return;\n     if(item>=0){\n       compare.innerText=item+\"↑\";\n     }\n     else{\n       compare.innerText=item+\"↓\";\n       compare.style.background=\"#eff2ff\";\n       compare.style.color=\"#5673EB\"\n     }\n   }\n   \n\n    return(\n      <div>\n      <div id=\"todaystatic\">\n          <div id=\"todayConfirmed\">\n            <span>오늘 확진자수</span>\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\n          </div>\n          <div id=\"comparelist\">\n          <div className=\"compare\">\n            <span>vs 어제</span>\n            <span id=\"compareYesterday\" className=\"comparenumber\">{selectArrow(\n              weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed)\n            }</span>\n          </div>\n          <div className=\"compare\">\n            <span>vs 1주일전</span>\n            <span className=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\n          </div>\n          </div>\n      </div>\n        <div className=\"graph\">\n          <Line\n          data={graphToday}\n          />\n          </div>\n          <div className=\"graph\">\n          <Bar \n                data={confirmedData}\n          />\n          </div>\n      </div>\n    )\n}\n\nexport default Graph","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport Graph from './FranceGraph';\n\nconst Acc = () => {\n    const [acc,setAcc]=useState([{\n        Confirmed: 1,\n        Deaths: 1,\n        Recovered: 1\n    }]);//초기값 설정\n\n\n    let Confirmed=acc[acc.length-1].Confirmed;\n    let Deaths=acc[acc.length-1].Deaths;;\n    let Recovered=acc[acc.length-1].Recovered;\n\n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/FR\")\n            .then(res=>res.json())\n            .then(data=>setAcc(data));\n            const exceptPage=document.getElementsByClassName(\"nation\");\n            for(let i=0;i<exceptPage.length;i++){\n                exceptPage[i].style.background=\"white\";\n            }\n            const thisPage=document.getElementById(window.location.pathname.substr(1));\n            thisPage.style.background=\"#DCDCDC\";\n        }\n        fetchEvent();\n       \n        \n        \n    },[])\n  \n    \n    return(\n        <div>\n        <table className=\"Acc\">\n            <thead>\n                <tr>\n                    <td>누적 확진자</td>\n                    <td>누적 사망자</td>\n                    <td>누적 격리해제</td>\n                </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td id=\"acConfirmed\">{Confirmed}</td> \n                <td id=\"acDeaths\">{Deaths}</td>\n                <td>{Recovered}</td>\n\n            </tr>\n            </tbody>\n        </table>\n        <Graph/>\n        </div>\n    )\n}\n\nexport default Acc","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport useDidMountEffect from \"../useDidMountEffect\";\nimport {Bar,Doughnut, Line} from \"react-chartjs-2\"\nimport Chart from 'chart.js/auto';\nimport axios from 'axios'\n\nconst Graph = () => {\n    const [today,setToday]=useState([{Confirmed: 1}]);\n    const [weekConfiremd,setWeekConfiremd]=useState([\n        {todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1},{todayComfirmed:1,date:1}]);\n    const [graphToday,setGraphToday]=useState(\n      {\n        labels:[\"1월\",\"2월\",\"3월\"],\n        datasets: [\n            {\n                label:\"국내 누적 확진자\",\n                backgroundColor:\"salmon\",\n                fill:false,\n                data: [10,5,3]\n            }\n        ]\n      }\n    );\n\n    const [confirmedData, setConfirmedData] = useState({\n      labels:[\"1월\",\"2월\",\"3월\"],\n              datasets: [\n                  {\n                      label:\"국내 누적 확진자\",\n                      backgroundColor:\"salmon\",\n                      fill:true,\n                      data: [10,5,3]\n                  }\n              ]\n  });\n\n\n  \n\n   \n    \n \n    \n       \n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/PT\")\n            .then(res=>res.json())\n            .then(data=>{\n              setToday(data)\n              console.log(data);\n              makeData(data);\n            });\n          \n            \n            \n            const makeData = (items) =>{\n              const arr= items.reduce((acc, cur)=>{\n                  const currentDate= new Date(cur.Date);\n  \n                  const year = currentDate.getFullYear();\n                  const month = currentDate.getMonth();\n                  const date = currentDate.getDate();\n                  const confirmed=cur.Confirmed;\n                  const active=cur.Active;\n                  const death=cur.Deaths;\n                  const recovered=cur.Recovered;\n  \n                  const findItem= acc.find(a=> a.year === year && a.month=== month)\n              \n                  if(!findItem){\n                      acc.push(\n                          {\n                              year:year, month: month,date:date, confirmed,active,death,recovered\n                          }\n                      )\n                  }\n                  if(findItem && findItem.date< date){\n                      findItem.active=active;\n                      findItem.death=death;\n                      findItem.date=date;\n                      findItem.year=year;\n                      findItem.month=month;\n                      findItem.recovered=recovered;\n                      findItem.confirmed=confirmed;\n                  }\n                  return acc;\n              },[]);\n              const labels= arr.map(a=> `${a.year}/ ${a.month+1}`)\n            setConfirmedData({\n                labels,\n                datasets: [\n                    {\n                        label:\"국내 누적 확진자\",\n                        backgroundColor:\"skyblue\",\n                        fill:true,\n                        data: arr.map(a=>a.confirmed)\n                    }\n                ]\n            })\n            }\n\n\n              \n            \n        }\n        fetchEvent();   \n    }, [])\n\n    //첫 렌더링 막기\n    useDidMountEffect(()=>{\n        const setWeek = () =>{\n            var week=[];\n            for(let i=today.length-2;i>today.length-10;i--){\n            const todayComfirmed=today[i].Confirmed-today[i-1].Confirmed;\n            const date=today[i].Date;\n            week.push({todayComfirmed,date});\n            }\n         \n            setWeekConfiremd(week);\n\n            var date=[];\n            var weekdata=[];\n            \n            for(let i=7;i>=0;i--){\n              var confirmed=week[i].todayComfirmed;\n              var splitDate=week[i].date.split('-');\n              var weekDate=`${splitDate[1]}/${splitDate[2].substring(0,2)}`;\n              date.push(weekDate);\n              weekdata.push(confirmed);\n            }\n    \n            setGraphToday({\n              labels:date,\n              datasets: [\n                {\n                    label:\"국내 확진자\",\n                    backgroundColor:\"skyblue\",\n                    fill:false,\n                    data: weekdata\n                }\n              ]\n            })\n\n        }\n        setWeek();\n    },[today])\n\n   const selectArrow=(item) =>{\n      const compare=document.getElementById(\"compareYesterday\");\n      if(compare==null)\n      return;\n     if(item>=0){\n       compare.innerText=item+\"↑\";\n     }\n     else{\n       compare.innerText=item+\"↓\";\n       compare.style.background=\"#eff2ff\";\n       compare.style.color=\"#5673EB\"\n     }\n   }\n   \n\n    return(\n      <div>\n      <div id=\"todaystatic\">\n          <div id=\"todayConfirmed\">\n            <span>오늘 확진자수</span>\n            <div id=\"todaynumber\">{weekConfiremd[0].todayComfirmed}명</div>\n          </div>\n          <div id=\"comparelist\">\n          <div className=\"compare\">\n            <span>vs 어제</span>\n            <span id=\"compareYesterday\" className=\"comparenumber\">{selectArrow(\n              weekConfiremd[0].todayComfirmed-weekConfiremd[1].todayComfirmed)\n            }</span>\n          </div>\n          <div className=\"compare\">\n            <span>vs 1주일전</span>\n            <span className=\"comparenumber\">{weekConfiremd[0].todayComfirmed-weekConfiremd[7].todayComfirmed}↑</span>\n          </div>\n          </div>\n      </div>\n        <div className=\"graph\">\n          <Line\n          data={graphToday}\n          />\n          </div>\n          <div className=\"graph\">\n          <Bar \n                data={confirmedData}\n          />\n          </div>\n      </div>\n    )\n}\n\nexport default Graph","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport Graph from './PortugalGraph';\n\nconst Acc = () => {\n    const [acc,setAcc]=useState([{\n        Confirmed: 1,\n        Deaths: 1,\n        Recovered: 1\n    }]);//초기값 설정\n\n\n    let Confirmed=acc[acc.length-1].Confirmed;\n    let Deaths=acc[acc.length-1].Deaths;;\n    let Recovered=acc[acc.length-1].Recovered;\n\n    useEffect(()=>{\n        const fetchEvent = () =>{\n            fetch(\"https://api.covid19api.com/total/dayone/country/PT\")\n            .then(res=>res.json())\n            .then(data=>setAcc(data));\n            const exceptPage=document.getElementsByClassName(\"nation\");\n            for(let i=0;i<exceptPage.length;i++){\n                exceptPage[i].style.background=\"white\";\n            }\n            const thisPage=document.getElementById(window.location.pathname.substr(1));\n            thisPage.style.background=\"#DCDCDC\";\n        }\n        fetchEvent();\n       \n        \n        \n    },[])\n  \n    \n    return(\n        <div>\n        <table className=\"Acc\">\n            <thead>\n                <tr>\n                    <td>누적 확진자</td>\n                    <td>누적 사망자</td>\n                    <td>누적 격리해제</td>\n                </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td id=\"acConfirmed\">{Confirmed}</td> \n                <td id=\"acDeaths\">{Deaths}</td>\n                <td>{Recovered}</td>\n\n            </tr>\n            </tbody>\n        </table>\n        <Graph/>\n        </div>\n    )\n}\n\nexport default Acc","import './App.css';\nimport Header from \"./contents/Header\"\nimport Acc from \"./contents/Korea/Acc\"\nimport Graph from \"./contents/Korea/Graph\"\nimport Nav from \"./contents/Nav\"\nimport Btn from \"./contents/BackgroundBt\"\nimport SpainAcc from \"./contents/Spain/SpainAcc\"\nimport JapanAcc from \"./contents/Japan/JapanAcc\"\nimport GermanyAcc from \"./contents/Germany/GermanyAcc\"\nimport BrazilAcc from \"./contents/Brazil/BrazilAcc\"\nimport FranceAcc from \"./contents/France/FranceAcc\"\nimport PortugalAcc from \"./contents/Portugal/PortugalAcc\"\n\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header />\n        <Nav />\n        {/* <Btn /> */}\n        \n      <Routes>\n        <Route  path=\"/korea\"  element={<Acc/>}/>\n        <Route  path=\"/korea\"  element={<Graph/>}/>\n        <Route  path=\"/corona-live\"  element={<Acc/>}/>\n        <Route  path=\"/corona-live\"  element={<Graph/>}/>\n        <Route  path=\"/japan\" element={ <JapanAcc/>}/>\n        <Route  path=\"/spain\" element={ <SpainAcc/>}/>\n        <Route  path=\"/germany\" element={ <GermanyAcc/>}/>\n        <Route  path=\"/brazil\" element={ <BrazilAcc/>}/>\n        <Route  path=\"/france\" element={ <FranceAcc/>}/>\n        <Route  path=\"/portugal\" element={ <PortugalAcc/>}/>\n      </Routes>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}